import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  app.enableCors({
    origin: '*',
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
    credentials: true,
  });

  /** Configurar validaciÃ³n global de DTOs */
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

  /** Configurar documentaciÃ³n Swagger */
  const config = new DocumentBuilder()
    .setTitle('Notifications Service API')
    .setDescription(`
      ## ðŸ”” Microservicio de Notificaciones

      Sistema completo de notificaciones en tiempo real con WebSockets y API REST.

      ### ðŸŽ¯ CaracterÃ­sticas Principales

      - âœ… **Notificaciones en tiempo real** vÃ­a WebSocket (Socket.IO)
      - âœ… **API REST completa** para gestiÃ³n de notificaciones
      - âœ… **Cache inteligente** con Redis para mejor rendimiento
      - âœ… **Pub/Sub** entre microservicios para eventos
      - âœ… **Rate limiting** para prevenir spam
      - âœ… **MÃºltiples tipos** de notificaciones (auth, media, comments, sistema)
      - âœ… **Filtros avanzados** y paginaciÃ³n
      - âœ… **AutenticaciÃ³n JWT** en todos los endpoints

      ### ðŸ“¡ ConexiÃ³n Socket.IO

      **URL**: \`ws://localhost:5903/notifications\`
      
      **AutenticaciÃ³n**: EnvÃ­a el token JWT en el query string:
      \`\`\`javascript
      const socket = io('ws://localhost:5903/notifications', {
        query: { token: 'tu_token_jwt_aqui' }
      });
      \`\`\`

      ### ðŸŽ® Eventos WebSocket Disponibles

      #### Eventos que puedes enviar:
      - **\`join_notifications\`**: Unirse a notificaciones del usuario
      - **\`get_notifications\`**: Obtener notificaciones con filtros
      - **\`mark_as_read\`**: Marcar notificaciones como leÃ­das

      #### Eventos que recibirÃ¡s:
      - **\`new_notification\`**: Nueva notificaciÃ³n en tiempo real
      - **\`unread_count\`**: Contador de notificaciones no leÃ­das
      - **\`unread_notifications\`**: Lista de notificaciones no leÃ­das
      - **\`marked_as_read\`**: ConfirmaciÃ³n de marcado como leÃ­do
      - **\`notifications\`**: Lista de notificaciones solicitadas
      - **\`error\`**: Errores de autenticaciÃ³n o procesamiento

      ### ðŸ§ª Cliente de Testing
      
      **URL**: http://localhost:8080
      
      Incluye un cliente web completo para probar todas las funcionalidades de Socket.IO.
    `)
    .setVersion('1.0')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
      },
      'access-token',
    )
    .addTag('notifications', 'GestiÃ³n de notificaciones')
    .addTag('health', 'Estado del servicio')
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);

  const port = process.env.PORT || 5903;
  await app.listen(port);
  console.log(`ðŸ”” Notifications Service ejecutÃ¡ndose en puerto ${port}`);
  console.log(`ðŸ“– DocumentaciÃ³n Swagger: http://localhost:${port}/api/docs`);
  console.log(`ðŸ“¡ Socket.IO: ws://localhost:${port}/notifications`);
}

bootstrap(); 