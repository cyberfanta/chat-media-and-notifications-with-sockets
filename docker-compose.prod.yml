services:
  # Base de datos PostgreSQL
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data_prod:/var/lib/postgresql/data
    networks:
      - auth-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d auth_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sessions
  redis-auth:
    image: redis:7-alpine
    container_name: redis-auth-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_auth_data_prod:/data
    networks:
      - auth-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Autenticaci√≥n
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres-auth
      DB_PORT: 5432
      DB_NAME: auth_db
      DB_USER: admin
      DB_PASSWORD: admin123
      REDIS_HOST: redis-auth
      REDIS_PORT: 6379
      JWT_SECRET: mi_super_secreto_jwt_para_autenticacion_2024
      JWT_EXPIRES_IN: 24h
    ports:
      - "5900:3000"
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy
    networks:
      - auth-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_auth_data_prod:
  redis_auth_data_prod:

networks:
  auth-network-prod:
    driver: bridge 